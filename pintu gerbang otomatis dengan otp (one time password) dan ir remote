//http://www.arduino.cc/playground/uploads/Code/Password.zip
#include <Password.h>
#include <IRLib.h>
#include <Servo.h> 
#include <SPI.h>
#include <Ethernet.h>

Password password = Password( "124356" );
const int ledPin =  4; //hijau
const int ledPin1 =  3; 
const int ledPin_hijau =  5; 
const int ledPin1_hijau =  6; //merah
const int solenoid =  2; 
const int buzzer_min =  8;
const int buzzer_plus =  7; 
  int a;
  int parse;
  char buf[10];
  int randata;


byte currentLength = 0;

#define MY_PROTOCOL NEC
#define LOUD             0xef6897 
#define MUTE             0xef28d7 
#define TRE_DOWN         0xef50af 
#define TRE_UP           0xef10ef 
#define BASS_DOWN        0xef609f 
#define BASS_UP          0xef20df  
#define MAST_DOWN        0xef807f  
#define MAST_UP          0xef00ff  

char code;

IRrecv My_Receiver(11);//Receive on pin 11
IRdecode My_Decoder; 
Servo My_Servo;  // create servo object to control a servo 
int pos=135;         // variable to store the servo position 
int Speed;       // Number of degrees to move each time a left/right button is pressed

byte mac[] = {
  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED
};
IPAddress ip(192, 168, 0, 177);
EthernetServer server(80);

void setup(){
  Serial.begin(9600);
  Ethernet.begin(mac, ip);
  server.begin();
  Serial.print("server is at ");
  Serial.println(Ethernet.localIP());
  parsein();
  parsein();
  parsein();
  
  
 
  pinMode(solenoid, OUTPUT);
  pinMode(buzzer_min, OUTPUT);
  pinMode(buzzer_plus, OUTPUT);
  pinMode(ledPin_hijau, OUTPUT);
  pinMode(ledPin1_hijau, OUTPUT);
  pinMode(ledPin, OUTPUT);
  pinMode(ledPin1, OUTPUT);
  merah();
  hijau_mati();
  digitalWrite(solenoid, LOW);
  digitalWrite(buzzer_min, LOW);
  digitalWrite(buzzer_plus, LOW);
  

  
  My_Receiver.No_Output();//Turn off any unused IR LED output circuit
  My_Servo.attach(9);  // attaches the servo on pin 9 to the servo object 
  My_Servo.write(pos); // Set initial position
  Speed = 3;
  My_Receiver.enableIRIn(); // Start the receiver
}

void loop(){
  inet();
  if (My_Receiver.GetResults(&My_Decoder)) {
       My_Decoder.decode();
       if(My_Decoder.decode_type==MY_PROTOCOL) {
          switch(My_Decoder.value) {
            case LOUD:   //Serial.println("!") ;
            code='!';
            buzz();
            
            break;
            case MUTE:   //Serial.println("?");
            code='?';
            buzz();
            break;
            case TRE_DOWN:  //Serial.println("1");
            code='1';
            buzz();
            break;
            case TRE_UP:    //Serial.println("2"); 
            code='2';
            buzz();
            break;
            case BASS_DOWN:   //Serial.println("3"); 
            code='3';
            buzz();
            break;
            case BASS_UP:      //Serial.println("4"); 
            code='4';
            buzz();
            break;
            case MAST_DOWN:      
            code='5';
             buzz(); 
             break;
            case MAST_UP:    
            code='6';
             buzz();
             break;
   
            
          }
        // tell servo to go to position in variable 'pos'
         //Serial.println(code); 
         uppassword();
         delay(100);
         
       }
       
     My_Receiver.resume();
     //My_Servo.write(pos); // tell servo to go to position in variable 'pos'
     //Serial.println(code);
    }
   // My_Servo.write(pos); // tell servo to go to position in variable 'pos'
         //Serial.println(code);
}      
    
    
    
    
  
  void uppassword(){
  
    char input = code;
    switch (code){
       case '!': //reset password
        password.reset();
        currentLength = 0;
       // Serial.println("\tPassword is reset!");
        merah();
        hijau_mati();
       My_Servo.write(135);
       delay(1500);
       digitalWrite(solenoid, LOW);
       parsein();
       
        break;
      case '?': //evaluate password
        if (password.evaluate()){
          //Serial.println("\tYou guessed the correct password!");
          merah_mati();
          hijau();
          digitalWrite(solenoid, HIGH);
          delay(1500);
           My_Servo.write(70); break;
           }
          
             
        else{
          //Serial.println("\tYou did not guess the correct password!");
          password.reset();
        digitalWrite(buzzer_min, LOW);
  digitalWrite(buzzer_plus, HIGH);
delay(700);
digitalWrite(buzzer_min,HIGH);
  digitalWrite(buzzer_plus, LOW);
  delay(200);
  digitalWrite(buzzer_min, LOW);
  digitalWrite(buzzer_plus, HIGH);
delay(700);
digitalWrite(buzzer_min,HIGH);
  digitalWrite(buzzer_plus, LOW);
  delay(200);
  digitalWrite(buzzer_min, LOW);
  digitalWrite(buzzer_plus, HIGH);
delay(700);
digitalWrite(buzzer_min,HIGH);
  digitalWrite(buzzer_plus, LOW);
  delay(200);
  digitalWrite(buzzer_min, LOW);
  digitalWrite(buzzer_plus, HIGH);
delay(700);
digitalWrite(buzzer_min,HIGH);
  digitalWrite(buzzer_plus, LOW);
       


        
          currentLength = 0;
        }
      break;
      default: //append any keypress that is not a '!' nor a '?' to the currently guessed password.
        password << input;
        currentLength++;
        
        //Print some feedback.
        //Serial.print("Enter password: ");
        for (byte i=0; i<currentLength; i++){
          Serial.print('*');
        }
        Serial.println();
     }

  }
  void buzz(){
    digitalWrite(buzzer_min, LOW);
  digitalWrite(buzzer_plus, HIGH);
delay(100);
digitalWrite(buzzer_min,HIGH);
  digitalWrite(buzzer_plus, LOW);
}
  
void merah(){
    digitalWrite(ledPin, HIGH);
  digitalWrite(ledPin1, LOW);
}
void merah_mati(){
    digitalWrite(ledPin, LOW);
  digitalWrite(ledPin1, LOW);
}

void hijau(){
   digitalWrite(ledPin_hijau, HIGH);
  digitalWrite(ledPin1_hijau, LOW);
}

void hijau_mati(){
   digitalWrite(ledPin_hijau, LOW);
  digitalWrite(ledPin1_hijau, LOW);
}

void parsein(){
  randata=random(0,6666);
  //int randata=9027;
  int data=randata/10;
  int data1=randata/100;
  int ribuan=data1/10;
      if (ribuan<=1){
          ribuan=1;
        }
        if (ribuan>=6){
        ribuan=6;}
        ribuan=ribuan*1000;
  
  int ratusan=data1%10;
      if (ratusan >=6){
        ratusan=6;
    }
      if (ratusan <=1){
        ratusan=1;
    }ratusan=ratusan*100;

  int puluhan=data%10;
      if (puluhan >=6){
        puluhan=6;
    }
      if (puluhan <=1){
        puluhan=1;
    }
    puluhan=puluhan*10;

  int satuan=randata%10;
      if (satuan >=6){
        satuan=6;
    }
      if (satuan <=1){
        satuan=1;
    }
    satuan=satuan*1;
    parse=ribuan+ratusan+puluhan+satuan;
    
 
sprintf(buf, "%d", parse);
password.set(buf); 
Serial.println(buf);


delay(100);
  } 
void inet() {
  // listen for incoming clients
  EthernetClient client = server.available();
  if (client) {
    Serial.println("new client");
    // an http request ends with a blank line
    boolean currentLineIsBlank = true;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        // if you've gotten to the end of the line (received a newline
        // character) and the line is blank, the http request has ended,
        // so you can send a reply
        if (c == '\n' && currentLineIsBlank) {
          // send a standard http response header
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println("Connection: close");  // the connection will be closed after completion of the response
          client.println("Refresh: 5");  // refresh the page automatically every 5 sec
          client.println();
          client.println("<!DOCTYPE HTML>");
          client.println("<html>");
          client.println("<head>");
          client.println("<title>Arduino Web Page</title>");
          client.println("</head>");
        
          client.println("<body>");
          
          
          client.println("<CENTER>");
          client.println("<b>");
          client.println("<strong>");
          client.println("<h1 style=font-size:900%;text-decoration:underline; >Hello from GrDock</h1><br>");
          client.println("</strong>");
          client.println("<p  style=font-size:500% >Stay life without risk</p>");
          client.println("<p></p>");
          client.println("</b>");
          
          client.println("</body>");
          client.println("</html>");
          
          // output the value of each analog input pin
          for (int analogChannel = 0; analogChannel < 1; analogChannel++) {
            int sensorReading = analogRead(analogChannel);
            client.print("<p style=font-size:370%;>");
            client.print("Password  ");
            //client.print(analogChannel);
            client.print(" : ");
            client.print(buf);
            client.println("</CENTER>");
            
            client.print("</p>");
            client.println("<br />");
          }
          client.println("</html>");
          break;
        }
        if (c == '\n') {
          // you're starting a new line
          currentLineIsBlank = true;
        }
        else if (c != '\r') {
          // you've gotten a character on the current line
          currentLineIsBlank = false;
        }
      }
    }
    // give the web browser time to receive the data
    delay(1);
    // close the connection:
    client.stop();
    Serial.println("client disconnected");
  }
}
